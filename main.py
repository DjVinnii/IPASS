import osfrom collections import Counterimport configimport sys# Globale variabelen makenlogfolder, logfile = config.init_cfg()if logfolder == "":    path = logfileelse:    path = str(logfolder) + '\\' + logfile# Functie voor het openen van het logbestanddef open_log(log_path):    # Try-Except voor de foutafhandeling wanneer een bestand niet bestaat    try:        file_in = open(log_path, 'r')        lines = file_in.readlines()        file_in.close()        return lines    except FileNotFoundError:        print('FOUT: Bestand of pad bestaat niet!\nHuidig bestandspad: ' + log_path + '\nControleer config.ini')# Functie voor het vinden van de bestandsnaam in de logdef get_filename(line):    first_comma = line.index(',')    second_comma = line.index(',', first_comma + 1)    filename = line[first_comma+3:second_comma-1]    return filename# Functie voor het uitlezen van het logbestand en hier de mislukte downloads van te laten ziendef read_error(log_path):        lines = open_log(log_path)        print('Mislukte downloads:\n\n')        try:            for line in lines:                if 'FAIL DOWNLOAD' in line:                    time = line[0:24]                    file = get_filename(line)                    print(time + " - " + file)        except TypeError:            print('\nMislukte downloads uitlezen niet gelukt\n')# Functie voor het uitlezen van de Top 10 gedownloadde bestandendef read_top(log_path):    lines = open_log(log_path)    file_list = []    print('Top 10 downloads:\n\n')    try:        for line in lines:            if 'OK DOWNLOAD' in line:                file = get_filename(line)                file_list.append(file)        counted_file_list = Counter(file_list)        counted_file_list = counted_file_list.most_common(10)        loop_count = 1        for counted_file_item in counted_file_list:            print(str(loop_count) + ": " + counted_file_item[0] + " (" + str(counted_file_item[1]) + " downloads)")            loop_count += 1    except TypeError:        print('\nTop 10 downloads uitlezen niet gelukt\n')# Functie voor het maken van het menudef menu():    print('Imteq FTP\n\nMaak een keuze:\n1: Lijst met mislukte downloads\n2: Top 10 gedownloadde bestanden\n0: Afsluiten')    menu_choice = input()    clear()    if menu_choice == '1':        read_error(path)        input('Druk op een toets om terug te gaan naar het menu...')        clear()        menu()    elif menu_choice == '2':        read_top(path)        input('Druk op een toets om terug te gaan naar het menu...')        clear()        menu()    elif menu_choice == '0':        exit()    else:        print('FOUT: Incorrecte invoer!')        input('Druk op een toets om terug te gaan naar het menu...')        clear()        menu()# Functie voor het legen van de CLIdef clear():    # voor het legen van de CLI wordt hiet een commando uitgevoerd op basis van het OS    osname = os.name    # Windows    if osname == 'nt':        os.system('cls')    # Linux    elif osname == 'posix':        os.system('clear')    # Anti Error    else:        print('\n' * 30)# Arguments afhandelen voor automatisering van het scriptif len(sys.argv) > 1:    # Eerst alle argumenten loopen voor onjuiste argumenten    for arg in sys.argv[1:]:        if (arg != '-f') and (arg != '-t'):            print('Onjuist argument: ' + arg +'\nGebruik -f voor het exporteren van een lijst met de mislukte downloads\nGebruik -t voor het exporteren van een lijst met de top 10 gedownloadde bestanden')            sys.exit()    # Tweede keer loopen om argumenten af te handelen    for arg in sys.argv[1:]:        if arg == '-f':            # Mislukte bestanden exporteren            read_error(path)        elif arg == '-t':            # Top 10 exporteren            read_top(path)else:    # Eerste keer aanroepen van het menu    clear()    menu()